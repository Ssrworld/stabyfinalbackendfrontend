// backend/src/services/lock.service.js (NEW FILE)

const db = require('../config/db.config');
const LOCK_TIMEOUT_MINUTES = 15; // ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à ‡§ú‡•â‡§¨ 15 ‡§Æ‡§ø‡§®‡§ü ‡§∏‡•á ‡§ú‡§º‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§Ö‡§ü‡§ï‡•Ä ‡§∞‡§π‡•á, ‡§§‡•ã ‡§≤‡•â‡§ï ‡§Ö‡§™‡§®‡•á ‡§Ü‡§™ ‡§π‡§ü ‡§ú‡§æ‡§è‡§ó‡§æ‡•§

/**
 * ‡§ï‡§ø‡§∏‡•Ä ‡§ú‡•â‡§¨ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡•â‡§ï ‡§π‡§æ‡§∏‡§ø‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
 * @param {string} jobName - ‡§≤‡•â‡§ï ‡§ï‡§ø‡§è ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§ú‡•â‡§¨ ‡§ï‡§æ ‡§Ø‡•Ç‡§®‡§ø‡§ï ‡§®‡§æ‡§Æ‡•§
 * @returns {Promise<boolean>} - ‡§Ö‡§ó‡§∞ ‡§≤‡•â‡§ï ‡§Æ‡§ø‡§≤ ‡§ó‡§Ø‡§æ ‡§§‡•ã true, ‡§µ‡§∞‡§®‡§æ false‡•§
 */
const acquireLock = async (jobName) => {
    try {
        // ‡§™‡•Å‡§∞‡§æ‡§®‡•á, ‡§Ö‡§ü‡§ï‡•á ‡§π‡•Å‡§è ‡§≤‡•â‡§ï‡•ç‡§∏ ‡§ï‡•ã ‡§π‡§ü‡§æ‡§è‡§Å‡•§
        const timeout = new Date(Date.now() - LOCK_TIMEOUT_MINUTES * 60 * 1000);
        await db('job_locks').where('locked_at', '<', timeout).del();
        
        // ‡§®‡§Ø‡§æ ‡§≤‡•â‡§ï ‡§°‡§æ‡§≤‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§
        await db('job_locks').insert({ job_name: jobName });
        
        // ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à ‡§è‡§∞‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§Ø‡§æ, ‡§á‡§∏‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§π‡•à ‡§ï‡§ø ‡§≤‡•â‡§ï ‡§Æ‡§ø‡§≤ ‡§ó‡§Ø‡§æ‡•§
        console.log(`[LockService] üîí Lock acquired for ${jobName}.`);
        return true;
    } catch (error) {
        // ‡§Ö‡§ó‡§∞ 'duplicate key' ‡§ï‡§æ ‡§è‡§∞‡§∞ ‡§Ü‡§§‡§æ ‡§π‡•à, ‡§á‡§∏‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§π‡•à ‡§ï‡§ø ‡§ú‡•â‡§¨ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ö‡§≤ ‡§∞‡§π‡•Ä ‡§π‡•à‡•§
        if (error.code === '23505' || error.code === 'ER_DUP_ENTRY') {
            console.log(`[LockService] ‚ùï Job ${jobName} is already running. Skipping this run.`);
            return false;
        }
        // ‡§ï‡§ø‡§∏‡•Ä ‡§î‡§∞ ‡§è‡§∞‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§â‡§∏‡•á ‡§≤‡•â‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§
        console.error(`[LockService] Error acquiring lock for ${jobName}:`, error);
        return false;
    }
};

/**
 * ‡§ï‡§ø‡§∏‡•Ä ‡§ú‡•â‡§¨ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡•â‡§ï ‡§ï‡•ã ‡§π‡§ü‡§æ‡§§‡§æ ‡§π‡•à‡•§
 * @param {string} jobName - ‡§ú‡§ø‡§∏ ‡§ú‡•â‡§¨ ‡§ï‡§æ ‡§≤‡•â‡§ï ‡§π‡§ü‡§æ‡§®‡§æ ‡§π‡•à ‡§â‡§∏‡§ï‡§æ ‡§®‡§æ‡§Æ‡•§
 */
const releaseLock = async (jobName) => {
    try {
        await db('job_locks').where({ job_name: jobName }).del();
        console.log(`[LockService] üü¢ Lock released for ${jobName}.`);
    } catch (error) {
        console.error(`[LockService] Error releasing lock for ${jobName}:`, error);
    }
};

module.exports = {
    acquireLock,
    releaseLock,
};