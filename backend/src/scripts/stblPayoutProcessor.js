// backend/src/scripts/stblPayoutProcessor.js

const path = require('path');
// --- ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®: dotenv ‡§ï‡•ã ‡§ï‡•á‡§µ‡§≤ ‡§§‡§≠‡•Ä ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§¨ NODE_ENV 'production' ‡§® ‡§π‡•ã ---
if (process.env.NODE_ENV !== 'production') {
    require('dotenv').config({ path: path.join(__dirname, '..', '..', '..', '.env') });
}

const { ethers } = require('ethers');
const db = require('../config/db.config');
const { hotWallet, provider } = require('./blockchainListener'); // ‡§π‡•â‡§ü ‡§µ‡•â‡§≤‡•á‡§ü ‡§î‡§∞ ‡§™‡•ç‡§∞‡•ã‡§µ‡§æ‡§á‡§°‡§∞ ‡§ï‡•ã ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç

const STBL_CONTRACT_ADDRESS = process.env.STBL_TOKEN_CONTRACT_ADDRESS;
const STBL_TOKEN_DECIMALS = parseInt(process.env.STBL_TOKEN_DECIMALS, 10) || 18;

// STBL ‡§ü‡•ã‡§ï‡§® ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ABI ‡§ï‡§æ ‡§è‡§ï ‡§õ‡•ã‡§ü‡§æ ‡§∏‡§æ ‡§π‡§ø‡§∏‡•ç‡§∏‡§æ
const STBL_ABI = [
    "function transfer(address to, uint256 amount) returns (bool)"
];

async function processStblPayouts() {
    if (!hotWallet || !provider) {
        console.warn("[STBL Payout] HotWallet or Provider not initialized. Skipping cycle.");
        throw new Error("HotWallet/Provider not initialized for STBL Payout Processor.");
    }
    if (!STBL_CONTRACT_ADDRESS) {
        console.warn("[STBL Payout] STBL_TOKEN_CONTRACT_ADDRESS is not set in .env. Skipping cycle.");
        throw new Error("STBL_TOKEN_CONTRACT_ADDRESS not configured.");
    }

    let hasEncounteredError = false;
    let firstErrorMessage = '';

    try {
        await db.transaction(async trx => {
            // ‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§∏‡§´‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡§ø‡§µ‡•â‡§∞‡•ç‡§°‡•ç‡§∏ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
            const pendingRewards = await trx('stbl_token_rewards')
                .select('id', 'user_id', 'amount', 'payout_wallet_address')
                .where('status', 'PENDING_TRANSFER')
                .forUpdate();

            if (pendingRewards.length === 0) {
                console.log(`[STBL Payout] No pending STBL rewards to process. Cycle finished.`);
                return; // ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•Å‡§õ ‡§®‡§π‡•Ä‡§Ç
            }

            console.log(`[STBL Payout] Found ${pendingRewards.length} pending STBL reward transfers.`);

            const stblContract = new ethers.Contract(STBL_CONTRACT_ADDRESS, STBL_ABI, hotWallet);

            for (const reward of pendingRewards) {
                try {
                    // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§µ‡•â‡§≤‡•á‡§ü ‡§™‡§§‡§æ ‡§î‡§∞ ‡§∞‡§æ‡§∂‡§ø ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§π‡•à‡§Ç
                    if (!reward.payout_wallet_address || !ethers.isAddress(reward.payout_wallet_address)) {
                        throw new Error(`Invalid or missing payout address for reward ID ${reward.id}`);
                    }
                    
                    const amountToSend = ethers.parseUnits(reward.amount.toString(), STBL_TOKEN_DECIMALS);

                    console.log(`[STBL Payout] Sending ${reward.amount} STBL to ${reward.payout_wallet_address} for reward ID ${reward.id}...`);

                    // ‡§ü‡•ã‡§ï‡§® ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§∏‡§´‡§∞ ‡§ï‡§∞‡•á‡§Ç
                    const tx = await stblContract.transfer(reward.payout_wallet_address, amountToSend);
                    await tx.wait(); // ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§ú‡•à‡§ï‡•ç‡§∂‡§® ‡§ï‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç

                    // ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§Æ‡•á‡§Ç ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
                    await trx('stbl_token_rewards')
                        .where('id', reward.id)
                        .update({
                            status: 'TRANSFERRED',
                            tx_hash: tx.hash,
                            updated_at: new Date()
                        });

                    console.log(`[STBL Payout] ‚úÖ SUCCESS: Reward ID ${reward.id} completed. Tx: ${tx.hash}`);

                } catch (error) {
                    console.error(`[STBL Payout] ‚ùå FAILED to process Reward ID ${reward.id}:`, error.message);
                    
                    hasEncounteredError = true;
                    if (!firstErrorMessage) {
                        firstErrorMessage = `Reward ID ${reward.id}: ${error.message}`;
                    }

                    // ‡§µ‡§ø‡§´‡§≤‡§§‡§æ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç, ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•ã 'FAILED' ‡§™‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
                    await trx('stbl_token_rewards')
                        .where('id', reward.id)
                        .update({ 
                            status: 'FAILED',
                            updated_at: new Date()
                        });
                    console.log(`[STBL Payout] üîÑ Marked reward ID ${reward.id} as FAILED.`);
                }
            }
        });

        if (hasEncounteredError) {
            throw new Error(`One or more STBL rewards failed to process. First error: ${firstErrorMessage}`);
        }

    } catch (error) {
        console.error("üî¥ [STBL Payout] CRITICAL ERROR during payout run:", error.message);
        throw error;
    }
}

module.exports = { processStblPayouts };