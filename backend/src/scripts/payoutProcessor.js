// backend/src/scripts/payoutProcessor.js

const path = require('path');
// --- ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®: dotenv ‡§ï‡•ã ‡§ï‡•á‡§µ‡§≤ ‡§§‡§≠‡•Ä ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§¨ NODE_ENV 'production' ‡§® ‡§π‡•ã ---
if (process.env.NODE_ENV !== 'production') {
    require('dotenv').config({ path: path.join(__dirname, '..', '..', '..', '.env') });
}

const { ethers } = require('ethers');
const db = require('../config/db.config'); 
// --- ‚úÖ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®: ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§à‡§Æ‡•á‡§≤ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®‡•ç‡§∏ ‡§ï‡•ã ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç ---
const { sendWithdrawalSuccessEmail, sendWithdrawalFailedEmail } = require('../services/email.service');
const { hotWallet } = require('./blockchainListener'); // ‡§π‡•â‡§ü ‡§µ‡•â‡§≤‡•á‡§ü ‡§ï‡•ã ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç

const USDT_CONTRACT_ADDRESS = '0x55d398326f99059fF775485246999027B3197955';
const USDT_DECIMALS = 18;

async function processPayouts() {
    if (!hotWallet) {
        console.warn("[Payout] HotWallet is not initialized. Skipping payout cycle.");
        throw new Error("HotWallet not initialized for Payout Processor.");
    }
    
    let hasEncounteredError = false;
    let firstErrorMessage = '';

    try {
        await db.transaction(async trx => {
            const pendingWithdrawals = await trx('withdrawals as w')
                .join('users as u', 'w.user_id', 'u.id')
                // --- ‚úÖ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®: admin_fee ‡§ï‡•ã ‡§≠‡•Ä ‡§∏‡•á‡§≤‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç ---
                .select('w.id', 'w.user_id', 'w.amount', 'w.final_amount', 'w.admin_fee', 'u.payout_wallet', 'u.email')
                .where('w.status', 'PENDING')
                .forUpdate();

            if (pendingWithdrawals.length === 0) {
                // console.log(`[Payout] No pending withdrawals to process. Cycle finished.`); // ‡§∏‡§æ‡§á‡§≤‡•á‡§Ç‡§ü ‡§Æ‡•ã‡§° ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ü‡§ø‡§™‡•ç‡§™‡§£‡•Ä ‡§ï‡•Ä ‡§ó‡§à
                return; // ‡§ï‡•ã‡§à ‡§ï‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç, ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¨‡§æ‡§π‡§∞ ‡§®‡§ø‡§ï‡§≤‡•á‡§Ç
            }
            
            console.log(`[Payout] Found ${pendingWithdrawals.length} pending withdrawals to process.`);

            const usdtContract = new ethers.Contract(USDT_CONTRACT_ADDRESS, ['function transfer(address to, uint amount) returns (bool)'], hotWallet);

            for (const wd of pendingWithdrawals) {
                try {
                    if (!wd.payout_wallet || !ethers.isAddress(wd.payout_wallet)) {
                        throw new Error(`Invalid or missing payout wallet for user ID ${wd.user_id}.`);
                    }

                    const amountToSend = ethers.parseUnits(wd.final_amount.toString(), USDT_DECIMALS);
                    
                    console.log(`[Payout] Processing withdrawal ID ${wd.id}: Sending ${wd.final_amount} USDT to ${wd.payout_wallet}`);

                    const tx = await usdtContract.transfer(wd.payout_wallet, amountToSend);
                    await tx.wait();
                    
                    await trx('withdrawals').where('id', wd.id).update({ 
                        status: 'COMPLETED',
                        completed_at: new Date(),
                        tx_hash: tx.hash
                    });
                    
                    // --- ‚úÖ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®: sendWithdrawalSuccessEmail ‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§™‡•à‡§∞‡§æ‡§Æ‡•Ä‡§ü‡§∞ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç ---
                    await sendWithdrawalSuccessEmail(wd.email, wd.amount, wd.final_amount, wd.admin_fee, tx.hash);
                    console.log(`[Payout] ‚úÖ SUCCESS: Withdrawal ID ${wd.id} completed. Tx: ${tx.hash}`);

                } catch (error) {
                    console.error(`[Payout] ‚ùå FAILED to process Withdrawal ID ${wd.id}:`, error.message);
                    
                    hasEncounteredError = true;
                    if (!firstErrorMessage) {
                        firstErrorMessage = `Withdrawal ID ${wd.id}: ${error.message}`;
                    }

                    await trx('withdrawals').where('id', wd.id).update({ 
                        status: 'FAILED',
                        completed_at: new Date()
                    });
                    await trx('users').where('id', wd.user_id).increment('withdrawable_balance', wd.amount);
                    console.log(`[Payout] üîÑ REFUNDED: User ${wd.user_id} refunded ${wd.amount}.`);

                    // --- ‚úÖ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®: ‡§µ‡§ø‡§´‡§≤‡§§‡§æ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•ã ‡§à‡§Æ‡•á‡§≤ ‡§≠‡•á‡§ú‡•á‡§Ç ---
                    await sendWithdrawalFailedEmail(wd.email, wd.amount);
                }
            }
        });

        if (hasEncounteredError) {
            throw new Error(`One or more withdrawals failed to process. First error: ${firstErrorMessage}`);
        }

    } catch (error) {
        console.error("üî¥ [Payout] CRITICAL ERROR during payout run:", error.message);
        throw error;
    }
}

module.exports = { processPayouts };