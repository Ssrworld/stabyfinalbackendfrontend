// backend/src/scripts/recoveryService.js (FINAL & UPDATED)

const path = require('path');
if (process.env.NODE_ENV !== 'production') {
    require('dotenv').config({ path: path.join(__dirname, '..', '..', '..', '.env') });
}

const db = require('../config/db.config');
const { activateUser } = require('../services/user.service'); // activateUser рд╕рд░реНрд╡рд┐рд╕ рдХреЛ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ

const REQUIRED_ACTIVATION_AMOUNT = 20.0;

/**
 * рдпрд╣ рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдЙрди рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреА рдЬрд╛рдБрдЪ рдХрд░рддреА рд╣реИ рдЬрд┐рдиреНрд╣реЛрдВрдиреЗ рдкрд░реНрдпрд╛рдкреНрдд рдлрдВрдб рдЬрдорд╛ рдХрд░ рджрд┐рдП рд╣реИрдВ
 * рдФрд░ рдЙрдиреНрд╣реЗрдВ рд╕рдХреНрд░рд┐рдп рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░рддреА рд╣реИред
 */
async function checkAndActivateUsers() {
    // console.log('[AccountActivator] ЁЯХ╡я╕П  Checking for users ready for activation...');
    
    try {
        const usersToPotentiallyActivate = await db('users')
            .whereIn('status', ['PENDING', 'INSUFFICIENT_DEPOSIT'])
            .select('id', 'status');

        if (usersToPotentiallyActivate.length === 0) {
            // console.log('[AccountActivator] No pending users to check. Cycle finished.');
            return;
        }
        
        for (const user of usersToPotentiallyActivate) {
            try {
                const { totalDeposit } = await db('partial_deposits')
                    .where({ user_id: user.id, is_processed: false })
                    .sum('amount as totalDeposit')
                    .first();

                const totalDepositedAmount = parseFloat(totalDeposit || 0);

                // рдпрджрд┐ рдХреБрд▓ рдЬрдорд╛ рд░рд╛рд╢рд┐ рд╕рдХреНрд░рд┐рдпрдг рдХреЗ рд▓рд┐рдП рдкрд░реНрдпрд╛рдкреНрдд рд╣реИ
                if (totalDepositedAmount >= REQUIRED_ACTIVATION_AMOUNT) {
                    console.log(`[AccountActivator] User ID ${user.id} has sufficient funds ($${totalDepositedAmount.toFixed(2)}). Attempting activation...`);
                    // рд╕рдХреНрд░рд┐рдпрдг рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд╢реБрд░реВ рдХрд░реЗрдВ
                    await activateUser(user.id);
                    console.log(`[AccountActivator] тЬЕ Successfully activated User ID ${user.id}.`);
                } 
                // рдпрджрд┐ рдХреБрдЫ рдлрдВрдб рдЬрдорд╛ рд╣реИрдВ рд▓реЗрдХрд┐рди рдкрд░реНрдпрд╛рдкреНрдд рдирд╣реАрдВ рд╣реИрдВ, рддреЛ рд╕реНрдерд┐рддрд┐ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ
                else if (totalDepositedAmount > 0 && user.status === 'PENDING') {
                    await db('users').where('id', user.id).update({ status: 'INSUFFICIENT_DEPOSIT' });
                    console.log(`[AccountActivator] User ID ${user.id} status updated to INSUFFICIENT_DEPOSIT.`);
                }
            } catch (error) {
                console.error(`[AccountActivator] тЭМ Error processing activation for User ID ${user.id}:`, error.message);
                // рд╣рдо рдпрд╣рд╛рдБ рддреНрд░реБрдЯрд┐ рдирд╣реАрдВ рдлреЗрдВрдХрддреЗ рддрд╛рдХрд┐ рд▓реВрдк рдЕрдиреНрдп рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЗ рд▓рд┐рдП рдЬрд╛рд░реА рд░рд╣реЗ
            }
        }

    } catch (error) {
        console.error("ЁЯФ┤ [AccountActivator] CRITICAL ERROR during run:", error.message);
        throw error; // рддреНрд░реБрдЯрд┐ рдХреЛ рдорд╛рд╕реНрдЯрд░ рд░рдирд░ рддрдХ рдкрд╣реБрдБрдЪрд╛рдПрдБ
    }
}

module.exports = { checkAndActivateUsers };