// ‡§Ø‡§π ‡§Æ‡§æ‡§á‡§ó‡•ç‡§∞‡•á‡§∂‡§® ENUM ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•ã ‡§π‡§Æ‡•á‡§∂‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§†‡•Ä‡§ï ‡§ï‡§∞ ‡§¶‡•á‡§ó‡§æ‡•§

exports.up = async function(knex) {
  console.log("üöÄ Starting the final fix for 'admin_earnings' table...");

  // ‡§ö‡§∞‡§£ 1: ‡§Ø‡§π ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡•á‡§ó‡§æ ‡§ï‡§ø 'type' ‡§ï‡•â‡§≤‡§Æ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç‡•§
  const hasTypeColumn = await knex.schema.hasColumn('admin_earnings', 'type');

  if (hasTypeColumn) {
    await knex.schema.alterTable('admin_earnings', function(table) {
      table.dropColumn('type');
      console.log("‚úÖ Step 1: Existing 'type' column dropped successfully.");
    });
  } else {
    console.log("‚ÑπÔ∏è Step 1: 'type' column not found, which is expected for a fresh DB. Skipping drop.");
  }
  
  // ‡§ö‡§∞‡§£ 2: ‡§è‡§ï ‡§®‡§Ø‡§æ, ‡§∏‡§æ‡§´ 'type' ‡§ï‡•â‡§≤‡§Æ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç ‡§ú‡•ã ‡§è‡§ï ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§Ç‡§ó ‡§π‡•à‡•§
  await knex.schema.alterTable('admin_earnings', function(table) {
    table.string('type', 50).notNullable().defaultTo('UNKNOWN');
    console.log("‚úÖ Step 2: New 'type' column (as string) added successfully.");
  });
  
  // ‡§ö‡§∞‡§£ 3: ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§∏‡§æ‡§Ø‡§ø‡§ï ‡§§‡§∞‡•ç‡§ï ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§∏‡§≠‡•Ä ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡•ç‡§∏ ‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§∞‡•ç‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§
  console.log("‚è≥ Step 3: Recovering transaction types based on business logic...");

  // JOINING_FEE: amount > 0, pool_level = 0, and sponsor_id is NULL
  const joiningFees = await knex('admin_earnings')
    .where({ type: 'UNKNOWN', pool_level: 0 })
    .whereNull('sponsor_id')
    .andWhere('amount', '>', 0)
    .update({ type: 'JOINING_FEE' });
  if(joiningFees > 0) console.log(`- Recovered ${joiningFees} 'JOINING_FEE' records.`);

  // DIRECT_REFERRAL: has a sponsor_id, and pool_level is 0
  const referralFees = await knex('admin_earnings')
    .where({ type: 'UNKNOWN', pool_level: 0 })
    .whereNotNull('sponsor_id')
    .update({ type: 'DIRECT_REFERRAL' });
  if(referralFees > 0) console.log(`- Recovered ${referralFees} 'DIRECT_REFERRAL' records.`);

  // POOL_PAYOUT: amount < 0 and pool_level > 0
  const poolPayouts = await knex('admin_earnings')
    .where({ type: 'UNKNOWN' })
    .where('pool_level', '>', 0)
    .andWhere('amount', '<', 0)
    .update({ type: 'POOL_PAYOUT' });
  if(poolPayouts > 0) console.log(`- Recovered ${poolPayouts} 'POOL_PAYOUT' records.`);
    
  // WITHDRAWAL_FEE: based on notes, if available. ‡§Ø‡§π ‡§Ö‡§¨ ‡§∏‡§π‡•Ä ‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ‡•§
  const withdrawalFees = await knex('admin_earnings')
    .where({ type: 'UNKNOWN' })
    .andWhere('notes', 'like', '%Withdrawal Fee%')
    .update({ type: 'WITHDRAWAL_FEE' });
  if(withdrawalFees > 0) console.log(`- Recovered ${withdrawalFees} 'WITHDRAWAL_FEE' records.`);

  // P2P_FEE: based on notes, if available. ‡§Ø‡§π ‡§≠‡•Ä ‡§Ö‡§¨ ‡§∏‡§π‡•Ä ‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ‡•§
  const p2pFees = await knex('admin_earnings')
    .where({ type: 'UNKNOWN' })
    .andWhere('notes', 'like', '%P2P transfer%')
    .update({ type: 'P2P_FEE' });
  if(p2pFees > 0) console.log(`- Recovered ${p2pFees} 'P2P_FEE' records.`);

  const remainingUnknown = await knex('admin_earnings').where({ type: 'UNKNOWN' }).count('* as count').first();
  console.log(`- ‚ö†Ô∏è  ${remainingUnknown.count} records remain 'UNKNOWN'. This should be 0 on a fresh DB.`);
  
  console.log("üéâ Final fix for 'admin_earnings' table completed.");
};

exports.down = function(knex) {
  return knex.schema.alterTable('admin_earnings', function(table) {
    table.dropColumn('type');
  });
};